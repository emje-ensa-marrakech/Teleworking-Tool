{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file://D%3A/EMJE%20projects/TeleTravail/Teleworking-Tool/src/app/api/auth/signIn/route.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\nimport argon from \"argon2\"\r\nimport jwt from \"jsonwebtoken\"\r\nimport { NextResponse } from \"next/server\";\r\n\r\nexport async function POST(req: Request) {\r\n    const prisma = new PrismaClient()\r\n    const data = await req.json()\r\n\r\n    const user = await prisma.user.findUnique(\r\n        {\r\n            where: {\r\n                email: data.email\r\n            }\r\n        }\r\n    )\r\n    console.log(data.password, user!.password);\r\n\r\n    if (user) {\r\n\r\n        if (await argon.verify(user.password, data.password)) {\r\n            const token = jwt.sign(\r\n                { email: data.email }, // Payload must be an object\r\n                process.env.TOKEN!,   // Secret key\r\n                { algorithm: 'HS256' } // Explicitly set the algorithm\r\n            )\r\n\r\n            return NextResponse.json(\r\n                {\r\n                    \"status\": \"done\",\r\n                    \"jwt\": token,\r\n                    \"type\": user.type,\r\n                    \"id\": user.id\r\n                }\r\n            )\r\n        } else {\r\n            return NextResponse.json(\r\n                {\r\n                    \"status\": \"error\",\r\n                    \"msg\": \"invalid password\"\r\n                }\r\n            )\r\n        }\r\n    } else {\r\n        return NextResponse.json(\r\n            {\r\n                \"status\": \"error\",\r\n                \"msg\": \"invalid user\"\r\n            }\r\n        )\r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,GAAY;IACnC,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;IAC/B,MAAM,OAAO,MAAM,IAAI,IAAI;IAE3B,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CACrC;QACI,OAAO;YACH,OAAO,KAAK,KAAK;QACrB;IACJ;IAEJ,QAAQ,GAAG,CAAC,KAAK,QAAQ,EAAE,KAAM,QAAQ;IAEzC,IAAI,MAAM;QAEN,IAAI,MAAM,qGAAA,CAAA,UAAK,CAAC,MAAM,CAAC,KAAK,QAAQ,EAAE,KAAK,QAAQ,GAAG;YAClD,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CAClB;gBAAE,OAAO,KAAK,KAAK;YAAC,GACpB,QAAQ,GAAG,CAAC,KAAK,EACjB;gBAAE,WAAW;YAAQ,EAAE,+BAA+B;;YAG1D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBACI,UAAU;gBACV,OAAO;gBACP,QAAQ,KAAK,IAAI;gBACjB,MAAM,KAAK,EAAE;YACjB;QAER,OAAO;YACH,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBACI,UAAU;gBACV,OAAO;YACX;QAER;IACJ,OAAO;QACH,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YACI,UAAU;YACV,OAAO;QACX;IAER;AACJ"}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}