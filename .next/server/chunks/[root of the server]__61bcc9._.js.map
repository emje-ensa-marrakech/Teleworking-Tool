{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file://D%3A/EMJE%20projects/TeleTravail/Teleworking-Tool/src/app/api/auth/signUp/route.ts"],"sourcesContent":["import { Prisma, PrismaClient } from \"@prisma/client\";\r\nimport argon from \"argon2\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { NextResponse } from \"next/server\";\r\n\r\nconst validateEmail = (email: string) => {\r\n    return email.match(\r\n        /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    );\r\n};\r\n\r\nexport async function POST(req: Request) {\r\n    const prisma = new PrismaClient();\r\n    const data = await req.json();\r\n\r\n    try {\r\n        if (!validateEmail(data.email)) {\r\n            return NextResponse.json({\r\n                status: \"error\",\r\n                msg: \"invalid email\"\r\n            });\r\n        }\r\n\r\n        if (data.type != \"TLorSTL\" && data.type != \"collaborateur\" && data.type != \"RH\") {\r\n            return NextResponse.json({\r\n                status: \"error\",\r\n                msg: \"invalid type\"\r\n            });\r\n        }\r\n\r\n        let hashedPassword = await argon.hash(data.password);\r\n\r\n        let user = await prisma.user.create({\r\n            data: {\r\n                email: data.email,\r\n                name: data.name,\r\n                password: hashedPassword,\r\n                type: data.type,\r\n            }\r\n        });\r\n\r\n        const token = jwt.sign(\r\n            { email: data.email }, // Payload must be an object\r\n            process.env.TOKEN!,   // Secret key\r\n            { algorithm: 'HS256' } // Explicitly set the algorithm\r\n        );\r\n\r\n        return NextResponse.json({\r\n            status: \"done\",\r\n            token: token,\r\n            userId: user.id\r\n        });\r\n    } catch (error) {\r\n        if (error.code === 'P2002') {\r\n            return NextResponse.json({\r\n                status: \"error\",\r\n                message: 'Unique constraint violation: A user with this email already exists.'\r\n            });\r\n        if (error instanceof Prisma.PrismaClientKnownRequestError) {\r\n            return NextResponse.json({\r\n                status: \"error\",\r\n                message: `Prisma Error Code: ${error.code}`\r\n            });\r\n\r\n            // Example: Handle Unique Constraint Violation (P2002)\r\n            }\r\n        } else if (error instanceof Prisma.PrismaClientValidationError) {\r\n            return NextResponse.json({\r\n                status: \"error\",\r\n                message: `Validation error: ${error.message}`\r\n            });\r\n        } else {\r\n            return NextResponse.json({\r\n                status: \"error\",\r\n                message: `Unknown error: ${error}`\r\n            });\r\n        }\r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,gBAAgB,CAAC;IACnB,OAAO,MAAM,KAAK,CACd;AAER;AAEO,eAAe,KAAK,GAAY;IACnC,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;IAC/B,MAAM,OAAO,MAAM,IAAI,IAAI;IAE3B,IAAI;QACA,IAAI,CAAC,cAAc,KAAK,KAAK,GAAG;YAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACrB,QAAQ;gBACR,KAAK;YACT;QACJ;QAEA,IAAI,KAAK,IAAI,IAAI,aAAa,KAAK,IAAI,IAAI,mBAAmB,KAAK,IAAI,IAAI,MAAM;YAC7E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACrB,QAAQ;gBACR,KAAK;YACT;QACJ;QAEA,IAAI,iBAAiB,MAAM,qGAAA,CAAA,UAAK,CAAC,IAAI,CAAC,KAAK,QAAQ;QAEnD,IAAI,OAAO,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;YAChC,MAAM;gBACF,OAAO,KAAK,KAAK;gBACjB,MAAM,KAAK,IAAI;gBACf,UAAU;gBACV,MAAM,KAAK,IAAI;YACnB;QACJ;QAEA,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CAClB;YAAE,OAAO,KAAK,KAAK;QAAC,GACpB,QAAQ,GAAG,CAAC,KAAK,EACjB;YAAE,WAAW;QAAQ,EAAE,+BAA+B;;QAG1D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,QAAQ;YACR,OAAO;YACP,QAAQ,KAAK,EAAE;QACnB;IACJ,EAAE,OAAO,OAAO;QACZ,IAAI,MAAM,IAAI,KAAK,SAAS;YACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACrB,QAAQ;gBACR,SAAS;YACb;;QASJ,OAAO,IAAI,iBAAiB,6HAAA,CAAA,SAAM,CAAC,2BAA2B,EAAE;YAC5D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACrB,QAAQ;gBACR,SAAS,CAAC,kBAAkB,EAAE,MAAM,OAAO,EAAE;YACjD;QACJ,OAAO;YACH,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACrB,QAAQ;gBACR,SAAS,CAAC,eAAe,EAAE,OAAO;YACtC;QACJ;IACJ;AACJ"}},
    {"offset": {"line": 173, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}