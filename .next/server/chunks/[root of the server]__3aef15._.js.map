{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/abdel/Documents/Club%20EMJE%202024/Gestion%20de%20Projets/Teleworking-Tool/src/app/api/RH/addRoom/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\n\r\nexport async function POST(req: NextRequest) {\r\n    const prisma = new PrismaClient()\r\n    const data = await req.json()\r\n\r\n    if (data.id && data.name && data.floor && data.expired && data.capacity) {\r\n        const user = await prisma.user.findUnique(\r\n            {\r\n                where: {\r\n                    id: Number(data.id)\r\n                }\r\n            }\r\n        )\r\n\r\n        if (user) {\r\n            if (user.type != \"RH\") {\r\n                return NextResponse.json(\r\n                    {\r\n                        \"status\": \"error\",\r\n                        \"msg\": \"invalid user type\"\r\n                    }, {\r\n                    status: 403\r\n                }\r\n                )\r\n            } else {\r\n                const workspace = await prisma.workspace.create(\r\n                    {\r\n                        data: {\r\n                            name: data.name,\r\n                            floor : data.roof,\r\n                            expired : data.expired,\r\n                            capacity : data.capacity,\r\n                            departement: data.departement,\r\n                            status: false\r\n\r\n                        }\r\n                    }\r\n                )\r\n\r\n                return NextResponse.json(\r\n                    {\r\n                        \"status\": \"done\",\r\n                        \"msg\": \"workspace created\",\r\n                        \"workspace id\": workspace.id\r\n                    }\r\n                )\r\n            }\r\n        } else {\r\n            return NextResponse.json(\r\n                {\r\n                    \"status\": \"error\",\r\n                    \"msg\": \"invalid user\"\r\n                }, {\r\n                status: 400\r\n            }\r\n            )\r\n        }\r\n    } else {\r\n        return NextResponse.json(\r\n            {\r\n                \"status\": \"error\",\r\n                \"msg\": \"invalid parameters\"\r\n            }, {\r\n            status: 400\r\n        }\r\n        )\r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,GAAgB;IACvC,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;IAC/B,MAAM,OAAO,MAAM,IAAI,IAAI;IAE3B,IAAI,KAAK,EAAE,IAAI,KAAK,IAAI,IAAI,KAAK,KAAK,IAAI,KAAK,OAAO,IAAI,KAAK,QAAQ,EAAE;QACrE,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CACrC;YACI,OAAO;gBACH,IAAI,OAAO,KAAK,EAAE;YACtB;QACJ;QAGJ,IAAI,MAAM;YACN,IAAI,KAAK,IAAI,IAAI,MAAM;gBACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;oBACI,UAAU;oBACV,OAAO;gBACX,GAAG;oBACH,QAAQ;gBACZ;YAEJ,OAAO;gBACH,MAAM,YAAY,MAAM,OAAO,SAAS,CAAC,MAAM,CAC3C;oBACI,MAAM;wBACF,MAAM,KAAK,IAAI;wBACf,OAAQ,KAAK,IAAI;wBACjB,SAAU,KAAK,OAAO;wBACtB,UAAW,KAAK,QAAQ;wBACxB,aAAa,KAAK,WAAW;wBAC7B,QAAQ;oBAEZ;gBACJ;gBAGJ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;oBACI,UAAU;oBACV,OAAO;oBACP,gBAAgB,UAAU,EAAE;gBAChC;YAER;QACJ,OAAO;YACH,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBACI,UAAU;gBACV,OAAO;YACX,GAAG;gBACH,QAAQ;YACZ;QAEJ;IACJ,OAAO;QACH,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YACI,UAAU;YACV,OAAO;QACX,GAAG;YACH,QAAQ;QACZ;IAEJ;AACJ"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}