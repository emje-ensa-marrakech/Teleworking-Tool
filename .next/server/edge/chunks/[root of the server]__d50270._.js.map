{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\r\nimport type { NextRequest } from 'next/server'\r\nimport { jwtVerify } from 'jose'\r\n\r\nexport async function middleware(request: NextRequest) {\r\n    const key = request.headers.get(\"Authorization\")\r\n\r\n    if (!key) {\r\n        return NextResponse.json(\r\n            { success: false, message: 'authentication err' },\r\n            { status: 403 }\r\n        )\r\n    }\r\n\r\n    try {\r\n        const secret = new TextEncoder().encode(process.env.TOKEN)\r\n        \r\n        await jwtVerify(key, secret ,{ algorithms: ['HS256']}) // Verify token using `jose`\r\n    } catch (error) {\r\n        return NextResponse.json(\r\n            { success: false, message: 'authentication failed' },\r\n            { status: 403 }\r\n        )\r\n    }\r\n}\r\n\r\nexport const config = {\r\n    matcher: ['/api/collab/:path*', '/api/RH/:path*', '/api/TlorSTL/:path*'],\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AAEA;AAFA;;;AAIO,eAAe,WAAW,OAAoB;IACjD,MAAM,MAAM,QAAQ,OAAO,CAAC,GAAG,CAAC;IAEhC,IAAI,CAAC,KAAK;QACN,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,SAAS;YAAO,SAAS;QAAqB,GAChD;YAAE,QAAQ;QAAI;IAEtB;IAEA,IAAI;QACA,MAAM,SAAS,IAAI,cAAc,MAAM,CAAC,QAAQ,GAAG,CAAC,KAAK;QAEzD,MAAM,CAAA,GAAA,wJAAA,CAAA,YAAS,AAAD,EAAE,KAAK,QAAQ;YAAE,YAAY;gBAAC;aAAQ;QAAA,GAAG,4BAA4B;;IACvF,EAAE,OAAO,OAAO;QACZ,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,SAAS;YAAO,SAAS;QAAwB,GACnD;YAAE,QAAQ;QAAI;IAEtB;AACJ;AAEO,MAAM,SAAS;IAClB,SAAS;QAAC;QAAsB;QAAkB;KAAsB;AAC5E"}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}